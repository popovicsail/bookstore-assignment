// <auto-generated />
using System;
using Bookstore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookstore.Infrastructure.Migrations
{
    [DbContext(typeof(BookstoreDbContext))]
    partial class BookstoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bookstore.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Birthday");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Biografija Ive Andrića...",
                            DateOfBirth = new DateTime(1892, 10, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Ivo Andrić"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Biografija Meše Selimovića...",
                            DateOfBirth = new DateTime(1910, 4, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Meša Selimović"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Biografija Danila Kiša...",
                            DateOfBirth = new DateTime(1935, 2, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Danilo Kiš"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Biografija Miloša Crnjanskog...",
                            DateOfBirth = new DateTime(1893, 10, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Miloš Crnjanski"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Biografija Dobrice Ćosića...",
                            DateOfBirth = new DateTime(1921, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Dobrica Ćosić"
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.AuthorAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer")
                        .HasColumnName("award_id");

                    b.Property<DateTime>("DateOfWinning")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_winning");

                    b.HasKey("Id")
                        .HasName("pk_author_award_bridge");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_author_award_bridge_author_id");

                    b.HasIndex("AwardId")
                        .HasDatabaseName("ix_author_award_bridge_award_id");

                    b.ToTable("AuthorAwardBridge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AuthorId = 1,
                            AwardId = 4,
                            DateOfWinning = new DateTime(1961, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2,
                            AuthorId = 1,
                            AwardId = 2,
                            DateOfWinning = new DateTime(1976, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -3,
                            AuthorId = 2,
                            AwardId = 1,
                            DateOfWinning = new DateTime(1967, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -4,
                            AuthorId = 2,
                            AwardId = 3,
                            DateOfWinning = new DateTime(1988, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -5,
                            AuthorId = 3,
                            AwardId = 1,
                            DateOfWinning = new DateTime(1972, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -6,
                            AuthorId = 3,
                            AwardId = 2,
                            DateOfWinning = new DateTime(1978, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -7,
                            AuthorId = 4,
                            AwardId = 3,
                            DateOfWinning = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -8,
                            AuthorId = 5,
                            AwardId = 1,
                            DateOfWinning = new DateTime(1954, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -9,
                            AuthorId = 5,
                            AwardId = 3,
                            DateOfWinning = new DateTime(1992, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -10,
                            AuthorId = 1,
                            AwardId = 1,
                            DateOfWinning = new DateTime(1955, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -11,
                            AuthorId = 2,
                            AwardId = 2,
                            DateOfWinning = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -12,
                            AuthorId = 3,
                            AwardId = 3,
                            DateOfWinning = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -13,
                            AuthorId = 4,
                            AwardId = 1,
                            DateOfWinning = new DateTime(1930, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -14,
                            AuthorId = 4,
                            AwardId = 2,
                            DateOfWinning = new DateTime(1982, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -15,
                            AuthorId = 5,
                            AwardId = 2,
                            DateOfWinning = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_creation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_awards");

                    b.ToTable("awards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfCreation = new DateTime(1954, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Književna nagrada za najbolji roman godine.",
                            Name = "NIN-ova nagrada"
                        },
                        new
                        {
                            Id = 2,
                            DateOfCreation = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Književna nagrada za najbolju pripovetku.",
                            Name = "Andrićeva nagrada"
                        },
                        new
                        {
                            Id = 3,
                            DateOfCreation = new DateTime(1988, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Književna nagrada za najbolju knjigu godine.",
                            Name = "Meša Selimović nagrada"
                        },
                        new
                        {
                            Id = 4,
                            DateOfCreation = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Međunarodna nagrada za književnost.",
                            Name = "Nobelova nagrada za književnost"
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_date");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_books_author_id");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_books_publisher_id");

                    b.ToTable("books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "978-86-521-1755-7",
                            PageCount = 379,
                            PublishedDate = new DateTime(1945, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Na Drini ćuprija"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            ISBN = "978-86-521-0318-5",
                            PageCount = 136,
                            PublishedDate = new DateTime(1954, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Prokleta avlija"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            ISBN = "978-86-10-01614-2",
                            PageCount = 472,
                            PublishedDate = new DateTime(1966, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Derviš i smrt"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            ISBN = "978-86-10-01584-8",
                            PageCount = 384,
                            PublishedDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Tvrđava"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            ISBN = "978-86-09-00813-2",
                            PageCount = 180,
                            PublishedDate = new DateTime(1976, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Grobnica za Borisa Davidoviča"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            ISBN = "978-86-09-00858-3",
                            PageCount = 160,
                            PublishedDate = new DateTime(1983, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Enciklopedija mrtvih"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            ISBN = "978-86-7562-022-2",
                            PageCount = 240,
                            PublishedDate = new DateTime(1929, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Seobe"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            ISBN = "978-86-7562-045-1",
                            PageCount = 120,
                            PublishedDate = new DateTime(1921, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Dnevnik o Čarnojeviću"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            ISBN = "978-86-521-0421-2",
                            PageCount = 360,
                            PublishedDate = new DateTime(1954, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Koreni"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            ISBN = "978-86-09-00770-8",
                            PageCount = 576,
                            PublishedDate = new DateTime(1961, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Deobe"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 5,
                            ISBN = "978-86-09-00902-3",
                            PageCount = 1500,
                            PublishedDate = new DateTime(1972, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Vreme smrti"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 1,
                            ISBN = "978-86-521-1472-3",
                            PageCount = 496,
                            PublishedDate = new DateTime(1945, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Travnička hronika"
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.ToTable("publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Resavska 33, Beograd",
                            Name = "Laguna",
                            Website = "www.laguna.rs"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Gospodara Vučića 245, Beograd",
                            Name = "Vulkan Izdavaštvo",
                            Website = "www.vulkani.rs"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Bulevar vojvode Mišića 17, Beograd",
                            Name = "BIGZ školstvo",
                            Website = "www.bigzskolstvo.rs"
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.AuthorAward", b =>
                {
                    b.HasOne("Bookstore.Domain.Entities.Author", "Author")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_award_bridge_authors_author_id");

                    b.HasOne("Bookstore.Domain.Entities.Award", "Award")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_award_bridge_awards_award_id");

                    b.Navigation("Author");

                    b.Navigation("Award");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Book", b =>
                {
                    b.HasOne("Bookstore.Domain.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_authors_author_id");

                    b.HasOne("Bookstore.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_books_publishers_publisher_id");

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Author", b =>
                {
                    b.Navigation("AuthorAwards");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Award", b =>
                {
                    b.Navigation("AuthorAwards");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
